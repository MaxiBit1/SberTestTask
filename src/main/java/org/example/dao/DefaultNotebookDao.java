package org.example.dao;

import org.example.config.JDBCConfig;
import org.example.dto.NotebookDto;
import org.example.rowMapper.NotebookMapper;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class DefaultNotebookDao implements NotebookDao {

    @Override
    public void createTableNotebook() throws SQLException {
        String sqlQuery = "CREATE TABLE public.notebooks(" +
                "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                "model_name VARCHAR(50)," +
                "company_name VARCHAR(50)," +
                "size_ram INTEGER," +
                "size_pzu INTEGER," +
                "resolution VARCHAR(20)," +
                "price DECIMAL)";
        Statement statement = JDBCConfig.getConnection().createStatement();
        int result = statement.executeUpdate(sqlQuery);
        JDBCConfig.closeConnection();

    }

    @Override
    public List<NotebookDto> selectAllNotebooks() throws SQLException {
        String sqlQuery = "SELECT * FROM public.notebooks";
        Statement statement = JDBCConfig.getConnection().createStatement();
        boolean hasResult = statement.execute(sqlQuery);
        if (!hasResult) {
            return List.of(null);
        }
        List<NotebookDto> listDto = new ArrayList<>();
        ResultSet resultSet = statement.getResultSet();
        while (resultSet.next()) {
            listDto.add(NotebookMapper.makeNotebookDto(resultSet));
        }
        JDBCConfig.closeConnection();
        return listDto;
    }

    @Override
    public List<NotebookDto> selectNotebooksWithParameters(String parameters, String operator, String value) throws SQLException {
        StringBuilder sqlQuery = new StringBuilder("SELECT * FROM notebooks WHERE ");
        String resultWhere = createWhere(parameters, operator, value);
        sqlQuery.append(resultWhere);
        Statement statement = JDBCConfig.getConnection().createStatement();
        List<NotebookDto> listDto = new ArrayList<>();
        ResultSet resultSet = statement.executeQuery(sqlQuery.toString());
        while (resultSet.next()) {
            listDto.add(NotebookMapper.makeNotebookDto(resultSet));
        }
        if (listDto.isEmpty()) {
            return List.of(null);
        }
        JDBCConfig.closeConnection();
        return listDto;
    }

    @Override
    public void addNotebook(NotebookDto notebookDto) throws SQLException {
        StringBuilder sqlQuery = new StringBuilder("INSERT INTO notebooks(model_name, company_name, size_ram, size_pzu, resolution, price) ");
        sqlQuery.append("VALUES(")
                .append("'")
                .append(notebookDto.getModelName())
                .append("'")
                .append(",")
                .append("'")
                .append(notebookDto.getCompanyName())
                .append("'")
                .append(",")
                .append(notebookDto.getSizeRam())
                .append(",")
                .append(notebookDto.getSizePZU())
                .append(",")
                .append("'")
                .append(notebookDto.getCompanyName())
                .append("'")
                .append(",")
                .append(notebookDto.getPrice())
                .append(")");
        Statement statement = JDBCConfig.getConnection().createStatement();
        statement.executeUpdate(sqlQuery.toString());
        JDBCConfig.closeConnection();
    }

    @Override
    public void deleteNotebook(String parameters, String operator, String value) throws SQLException {
        StringBuilder sqlQueryDelete = new StringBuilder("DELETE FROM notebooks WHERE ");
        String sqlWhere = createWhere(parameters, operator, value);
        sqlQueryDelete.append(sqlWhere);
        Statement statement = JDBCConfig.getConnection().createStatement();
        statement.executeUpdate(sqlQueryDelete.toString());
        JDBCConfig.closeConnection();
    }

    @Override
    public void dropTable() throws SQLException {
        Statement statement = JDBCConfig.getConnection().createStatement();
        statement.executeUpdate("DROP TABLE notebooks");
        JDBCConfig.closeConnection();
    }

    private String createWhere(String parameters, String operator, String value) {
        StringBuilder stringBuilder = new StringBuilder();
        if (parameters.isEmpty()) {
            return "1=1";
        }
        return stringBuilder
                .append(parameters)
                .append(operator)
                .append(value)
                .toString();
    }
}
